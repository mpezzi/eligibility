<?php

/**
 * @file
 * Provides an eligibility api for Drupal.
 */

require_once dirname(__FILE__) . '/eligibility.inc';

/**
 * Debug date format.
 */
define('ELIGIBILITY_DEBUG_DATE_FORMAT', 'd M Y H:i:s');

/**
 * Implements hook_permission().
 */
function eligibility_permission() {
  return array(
    'view own eligibility' => array(
      'title' => t('View own eligibility'),
      'description' => t('Allows users to view own eligibility information.'),
    ),
    'view all eligibility' => array(
      'title' => t('View all eligibility'),
      'description' => t('Allows users to view all eligibility information.'),
    ),
    'debug eligibility' => array(
      'title' => t('Debug eligibility'),
      'description' => t('Allows users to view debug information about eligibility.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function eligibility_menu() {
  return array(
    'user/%user/eligibility' => array(
      'title' => 'Eligibility',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eligibility_user_eligibility', 1),
      'access callback' => 'eligibility_user_access',
      'access arguments' => array('view eligibility', 1),
      'file' => 'eligibility.pages.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function eligibility_block_info() {
  $blocks['debug'] = array(
    'info' => t('Eligibility Debugger'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function eligibility_block_view($delta = '') {
  $block = array();
  if ( $delta == 'debug' && user_access('debug eligibility') ) {
    $block['subject'] = t('Eligibility Debugger');
    $block['content'] = array(
      'eligibility' => array(
        '#type' => 'html_tag',
        '#tag' => 'pre',
        '#value' => print_r(eligibility_get(), 1),
      ),
    );
  }
  return $block;
}

/**
 * Implements hook_user_delete().
 */
function eligibility_user_delete($account) {
  db_delete('eligibility_events')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_eligibility_restriction_info().
 */
function eligibility_eligibility_restriction_info() {
  $restrictions['interval'] = array(
    'name' => t('Interval'),
    'description' => t('Interval based restrictions.'),
    'callback' => 'eligibility_restriction_interval',
  );
  $restrictions['series'] = array(
    'name' => t('Series'),
    'description' => t('Series based restrictions.'),
    'callback' => 'eligibility_restriction_series',
  );
  return $restrictions;
}

/**
 * Restriction Callback: Test.
 */
function eligibility_restriction_interval($name, $identifier, $time) {
  return $time + 60;
}

/**
 * Restriction Callback: Series.
 */
function eligibility_restriction_series($name, $identifier, $time) {
  return $time + 60;
}

/**
 * Determine whether the user has a given privilege.
 *
 * @param $string
 *   The permission, such as "view eligibility", being checked for.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   Boolean TRUE if the current user has the requested permission.
 */
function eligibility_user_access($string, $account = NULL) {
  global $user;

  if ( $string == 'view eligibility' ) {
    if ( user_access('view own eligibility') && $user->uid == $account->uid ) {
      return TRUE;
    }

    if ( user_access('view all eligibility') ) {
      return TRUE;
    }
  }

  return FALSE;
}