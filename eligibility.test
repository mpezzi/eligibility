<?php

/**
 * @file
 * Provides test classes for Eligibility module.
 */


class EligibilityTestCase extends DrupalWebTestCase {

  private $uid1 = 1;
  private $uid2 = 2;

  private $tid1 = 1;
  private $tid2 = 2;

  /**
   * Implements getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Eligibility'),
      'description' => t('Tests the eligibility module for proper calculations.'),
      'group' => t('Eligibility'),
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('eligibility');
  }

  /**
   * Test Interval Restrictions.
   */
  function testRestrictionInterval() {
    $delay = 10;
    $duration = 5;
    $start = time() + $delay;
    eligibility_restriction_create_interval(array('start' => $start, 'end' => $start + 30, 'duration' => $duration));

    // Check eligibility before first period starts ($timestamp = 5 seconds before).
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start - 5));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t('Single Interval > Interval calculator returned correct status (EARLY) for a timestamp before first eligibility period has started.'));

    // Check eligibility at exactly the start of the first period ($timestamp = start).
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t('Single Interval > Interval calculator returned correct status (ELIGIBLE) for a timestamp after first eligibility period has started.'));

    // Check eligibility at exactly the end of the last period ($timestamp = 30 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 30));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t('Single Interval > Interval calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended.'));

    // Check eligibility after last period ends ($timestamp = 31 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 31));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t('Single Interval > Interval calculator returned correct status (LATE) for a timestamp after last eligibility period has ended.'));

    /**
     * Check eligibility mid-interval
     * ($timestamp = 7 seconds after start).
     * Expected result:
     *  period_start = start time + 1 interval * interval length
     *  period_end = start time + 2 intervals * interval length
     */
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 7));
    $this->assertEqual($eligibility->period_start, $start + 1 * $duration, t('Single Interval > Interval calculator returned correct period_start for a mid-interval timestamp.'));
    $this->assertEqual($eligibility->period_end, $start + 2 * $duration, t('Single Interval > Interval calculator returned correct period_end for a mid-interval timestamp.'));

    /**
     * Check eligibility between intervals
     * ($timestamp = 10 seconds after start. i.e. end of second interval / start of third interval)
     * Expected result:
     *  period_start = start time + 2 intervals * interval length
     *  period_end = start time + 3 intervals * interval length
     */
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 10));
    $this->assertEqual($eligibility->period_start, $start + 2 * $duration, t('Single Interval > Interval calculator returned correct period_start for a timestamp between intervals.'));
    $this->assertEqual($eligibility->period_end, $start + 3 * $duration, t('Single Interval > Interval calculator returned correct period_end for a timestamp between intervals.'));

    /**
     * Check eligibility after user claims a point.
     * (Claim point 5 seconds after start, check eligibility right after it)
     */
    eligibility_event_save($this->uid1, 0, $start + 5);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 5));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t('Single Interval > Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point.'));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration, t("Single Interval > Interval calculator returned correct next value for when the user will become eligible after claiming a point."));
  }

  /**
   * Test Series Restrictions.
   */
  function testRestrictionSeries() {
    /**
     * Define series testing settings and generate series restriction.
     * Test settings:
     * - 5 second gap between timestamps in series
     * - 6 timestamps (end = 35 seconds from now)
     * - First period starts 5 seconds from now.
     */
    $duration = 5;
    $num_timestamps = 6;    // 6 timestamps = 5 periods
    $delay = $duration;
    $start = time() + $delay;
    eligibility_restriction_create_series(array('number' => $num_timestamps, 'duration' => $duration));

    // Check eligibility before first period starts ($timestamp = 5 seconds before start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start - $duration));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t("Single Series > Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first period ($timestamp = start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Single Series > Series calculator returned correct status (ELIGIBLE) for a timestamp after first eligibility period has started."));

    // Check eligibility at exactly the end of the last period ($timestamp = 30 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + ($num_timestamps - 1) * $duration));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Single Series > Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last period ends ($timestamp = 31 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + ($num_timestamps - 1) * $duration + 1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Single Series > Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility mid-interval
     * ($timestamp = 7 seconds after start).
     * Expected result:
     *  period_start = start time + 5-second gap (1 timestamp * 5 second period length)
     *  period_end = start time + 10-second gap (2 timestamps * 5 second period length)
     */
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 7));
    $this->assertEqual($eligibility->period_start, $start + 1 * $duration, t('Single Series > Series calculator returned correct period_start for an in-period timestamp.'));
    $this->assertEqual($eligibility->period_end, $start + 2 * $duration, t('Single Series > Series calculator returned correct period_end for an in-period timestamp.'));

    /**
     * Check eligibility exactly on a series timestamp
     * ($timestamp = 10 seconds after start. i.e. the exact time of second timestamp in the series)
     * Expected result:
     *  period_start = start time + 10-second gap (2 timestamps * 5 second period length)
     *  period_end = start time + 15-seconds gap (3 timestamps * 5 second period length)
     */
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 10));
    $this->assertEqual($eligibility->period_start, $start + 2 * $duration, t("Single Series > Series calculator returned correct period_start for a timestamp exactly on a series timestamp."));
    $this->assertEqual($eligibility->period_end, $start + 3 * $duration, t("Single Series > Series calculator returned correct period_end for a timestamp exactly on a series timestamp."));

    /**
     * Check eligibility after user claims a point.
     * (Claim point 5 seconds after start, check eligibility right after it)
     */
    eligibility_event_save($this->uid1, 0, $start + 5);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'timestamp' => $start + 5));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Single Series > Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration, t("Single Series > Series calculator returned correct next value for when the user will become eligible after claiming a point."));
  }

  /**
   * Test Multiple Interval Restrictions.
   */
  function testRestrictionMultipleInterval() {
    $start = time() + 10;
    $duration1 = 5;
    $duration2 = 8;

    eligibility_restriction_create_interval(array('tid' => $this->tid1, 'start' => $start, 'end' => $start + 30, 'duration' => $duration1));
    eligibility_restriction_create_interval(array('tid' => $this->tid2, 'start' => $start, 'end' => $start + 48, 'duration' => $duration2));

    // Check eligibility before first interval starts ($timestamp = 5/8 seconds before start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start - $duration1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t('Multiple Interval > A: Interval Calculator returned correct status (EARLY) for a timestamp before first eligibility period has started.'));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start - $duration2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t('Multiple Interval > B: Interval Calculator returned correct status (EARLY) for a timestamp before first eligibility period has started.'));

    // Check eligibility at exactly the start of the first interval ($timestamp = start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Interval > A: Interval Calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Interval > B: Interval Calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

    // Check eligibility at exactly the start of the first interval ($timestamp = start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start + 30));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Interval > A: Interval Calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start + 48));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Interval > B: Interval Calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last interval ends ($timestamp = 31/49 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start + 31));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Interval > A: Interval Calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start + 49));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Interval > B: Interval Calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility after user claims a point towards one of the intervals (Interval A).
     * (Claim point 3 seconds after start (when both intervals will be active), check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid1, $start + 3);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start + 3));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Interval > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a particular interval (Interval A)."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration1, t("Multiple Interval > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval A) after claiming a point."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start + 3));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Interval > B: Interval calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards different interval (Interval A)."));

    /**
     * Check eligibility after user claims points towards both of the intervals (Interval A and B).
     * (Claim point 6 seconds after start (after interval A has reset, and both intervals are active), check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid1, $start + 6);
    eligibility_event_save($this->uid1, $this->tid2, $start + 6);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start + 6));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Interval > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both intervals (Interval A and B)"));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration1, t("Multiple Interval > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval A) after claiming a point."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start + 6));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Interval > B: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both intervals (Interval A and B)"));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration2, t("Multiple Interval > B: Interval calculator returned correct next value for when the user will become eligible for a particular interval (Interval B) after claiming a point."));
  }

  /**
   * Test Multiple Series Restrictions.
   */
  function testRestrictionMultipleSeries() {
    /**
     * Define multiple series testing settings and generate series restrictions.
     *
     * Test settings:
     *
     * a. First restriction
     * - 5 second periods
     * - First period starts 10 seconds from now.
     * - Last period last is 30 seconds from now.
     *
     * b. Second restriction
     * - 8 second periods
     * - First period starts 10 seconds from now.
     * - Last period last is 48 seconds from now.
     *
     */

    $num_timestamps = 6;  // 6 timestamps = 5 eligibility periods

    $duration1 = 5;
    $duration2 = 8;

    $start1 = time() + $duration1;
    $start2 = time() + $duration2;

    eligibility_restriction_create_series(array('tid' => $this->tid1, 'number' => $num_timestamps, 'duration' => $duration1));
    eligibility_restriction_create_series(array('tid' => $this->tid2, 'number' => $num_timestamps, 'duration' => $duration2));

    // Check eligibility before first interval starts ($timestamp = 5/8 seconds before start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 - $duration1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t("Multiple Series > A: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 - $duration2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t("Multiple Series > B: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first interval ($timestamp = start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

    // Check eligibility at exactly the end of the last interval ($timestamp = 30/48 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + ($num_timestamps - 1) * $duration1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Series > A: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 + ($num_timestamps - 1) * $duration2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Series > B: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last interval ends ($timestamp = 31/49 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + ($num_timestamps - 1) * $duration1 + 1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Series > A: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 + ($num_timestamps - 1) * $duration2 + 1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Multiple Series > B: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility after user claims a point towards one of the series (Series B).
     * (Claim point at the start of series B (when both series will be active), check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid2, $start2);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards a different series (Series B)."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a particular series (Series B)."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration2, t("Multiple Series > B: Series calculator returned correct next value for when the user will become eligible for a particular series (Series B) after claiming a point."));

    /**
     * Check eligibility after user claims points towards both of the series (Series A and B).
     * (Claim point 8 seconds after start of series B (after Series B has reset and both series are active again), check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid1, $start2 + 8);
    eligibility_event_save($this->uid1, $this->tid2, $start2 + 8);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start2 + 8));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Series > A: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both series (Series A and B)"));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration1, t("Multiple Series > A: Series calculator returned correct next value for when the user will become eligible for a particular series (Series A) after claiming a point."));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Multiple Series > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both series (Series A and B)"));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration2, t("Multiple Series > B: Series calculator returned correct next value for when the user will become eligible for a particular series (Series B) after claiming a point."));
  }

  /**
   * Test Mixed Interval and Series Restrictions.
   */
  function testRestrictionMixed() {

    /**
     * Note: Start times and durations are matched up for this test.
     * Series generator creates a first period that starts 1 period's length
     * from the current time.
     */
    $duration1 = 5;
    $duration2 = 5;
    $start1 = time() + $duration1;
    $start2 = time() + $duration2;
    $num_timestamps = 6;

    eligibility_restriction_create_interval(array('tid' => $this->tid1, 'start' => $start1, 'end' => $start2 + ($num_timestamps * $duration1), 'duration' => $duration1));
    eligibility_restriction_create_series(array('tid' => $this->tid2, 'number' => $num_timestamps, 'duration' => $duration2));

    // Check eligibility before first interval/period starts ($timestamp = 5 seconds before start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 - $duration1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t("Mixed > A: Interval calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 - $duration2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_EARLY, t("Mixed > B: Series calculator returned correct status (EARLY) for a timestamp before first eligibility period has started."));

    // Check eligibility at exactly the start of the first interval/period ($timestamp = start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (ELIGIBLE) for a timestamp at exactly when first eligibility period has started."));

    // Check eligibility at exactly the end of the last interval/period ($timestamp = 30 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + ($num_timestamps) * $duration1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Mixed > A: Interval calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 + ($num_timestamps - 1) * $duration2));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Mixed > B: Series calculator returned correct status (LATE) for a timestamp exactly on when last eligibility period has ended."));

    // Check eligibility after last interval/period ends ($timestamp = 31 seconds after start)
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + ($num_timestamps) * $duration1 + 1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Mixed > A: Interval calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start2 + ($num_timestamps - 1) * $duration2 + 1));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_LATE, t("Mixed > B: Series calculator returned correct status (LATE) for a timestamp after last eligibility period has ended."));

    /**
     * Check eligibility for interval after user claims a point towards the series restriction
     * (Claim point 5 seconds after start, check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid2, $start1 + 5);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + 5));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards a series restriction."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start1 + 5));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards a series restriction."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration2, t("Mixed > B: Series calculator returned correct next value for when the user will become eligible for a particular series after claiming a point."));

    /**
     * Check eligibility for series after user claims a point towards the interval restriction
     * (Claim point 10 seconds after start, (both restrictions have reset by then, check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid1, $start1 + 10);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + 10));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed a point towards an interval restriction."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration1, t("Mixed > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval after claiming a point."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start1 + 10));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (ELIGIBLE) for a timestamp after user has claimed a point towards an interval restriction."));

    /**
     * Check eligibility after user claims points towards both the interval and series restrictions
     * (Claim point 15 seconds after start (both restrictions have reset by then, check eligibility right after it)
     */
    eligibility_event_save($this->uid1, $this->tid1, $start1 + 15);
    eligibility_event_save($this->uid1, $this->tid2, $start1 + 15);
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid1, 'timestamp' => $start1 + 15));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Mixed > A: Interval calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both the interval and series restrictions."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration1, t("Mixed > A: Interval calculator returned correct next value for when the user will become eligible for a particular interval after claiming a point."));
    $eligibility = eligibility_get(array('uid' => $this->uid1, 'tid' => $this->tid2, 'timestamp' => $start1 + 15));
    $this->assertEqual($eligibility->status, ELIGIBILITY_IS_NOT_ELIGIBLE, t("Mixed > B: Series calculator returned correct status (NOT ELIGIBLE) for a timestamp after user has claimed points towards both the interval and series restrictions."));
    $this->assertTrue($eligibility->next !== 0 && $eligibility->next != -1 && $eligibility->next <= $duration2, t("Mixed > B: Series calculator returned correct next value for when the user will become eligible for a particular series after claiming a point."));
  }
}
